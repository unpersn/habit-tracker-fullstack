const API_BASE_URL = 'http://localhost:5000/api';

class AuthManager {
    constructor() {
        this.token = localStorage.getItem('token');
        this.user = JSON.parse(localStorage.getItem('user') || 'null');
        this.init();
    }

    init() {
        // –ï—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞
        if (window.location.pathname.includes('login.html')) {
            this.initAuthPage();
        } else {
            // –ï—Å–ª–∏ –º—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            this.checkAuth();
        }
    }

    initAuthPage() {
        console.log('üîê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        
        // –ï—Å–ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        if (this.token && this.user) {
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º');
            window.location.href = 'index.html';
            return;
        }

        this.bindAuthEvents();
    }

    bindAuthEvents() {
        const loginForm = document.getElementById('loginForm');
        const registerForm = document.getElementById('registerForm');

        if (loginForm) {
            loginForm.addEventListener('submit', (e) => this.handleLogin(e));
        }

        if (registerForm) {
            registerForm.addEventListener('submit', (e) => this.handleRegister(e));
        }

        console.log('üéØ –°–æ–±—ã—Ç–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–≤—è–∑–∞–Ω—ã');
    }

    async handleLogin(e) {
        e.preventDefault();
        
        const email = document.getElementById('loginEmail').value.trim();
        const password = document.getElementById('loginPassword').value;

        if (!email || !password) {
            this.showMessage('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
            return;
        }

        console.log('üîë –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è:', email);

        try {
            this.showLoading(true);
            
            const response = await fetch(`${API_BASE_URL}/auth/login`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ email, password })
            });

            const data = await response.json();
            console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –≤—Ö–æ–¥:', response.status);

            if (response.ok) {
                console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥');
                this.setAuth(data.token, data.user);
                this.showMessage('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!', 'success');
                
                // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                setTimeout(() => {
                    window.location.href = 'index.html';
                }, 1000);
                
            } else {
                console.log('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', data.message);
                this.showMessage(data.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞', 'error');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –≤—Ö–æ–¥–µ:', error);
            this.showMessage('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
        } finally {
            this.showLoading(false);
        }
    }

    async handleRegister(e) {
        e.preventDefault();
        
        const username = document.getElementById('registerUsername').value.trim();
        const email = document.getElementById('registerEmail').value.trim();
        const password = document.getElementById('registerPassword').value;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!username || !email || !password) {
            this.showMessage('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
            return;
        }

        if (username.length < 3) {
            this.showMessage('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞', 'error');
            return;
        }

        if (password.length < 6) {
            this.showMessage('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤', 'error');
            return;
        }

        if (!this.isValidEmail(email)) {
            this.showMessage('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email', 'error');
            return;
        }

        console.log('üìù –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è:', email);

        try {
            this.showLoading(true);
            
            const response = await fetch(`${API_BASE_URL}/auth/register`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ username, email, password })
            });

            const data = await response.json();
            console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:', response.status);

            if (response.ok) {
                console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è');
                this.setAuth(data.token, data.user);
                this.showMessage('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!', 'success');
                
                // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                setTimeout(() => {
                    window.location.href = 'index.html';
                }, 1000);
                
            } else {
                console.log('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', data.message);
                this.showMessage(data.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', 'error');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
            this.showMessage('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
        } finally {
            this.showLoading(false);
        }
    }

    setAuth(token, user) {
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è:', user.username);
        
        this.token = token;
        this.user = user;
        
        localStorage.setItem('token', token);
        localStorage.setItem('user', JSON.stringify(user));
    }

    logout() {
        console.log('üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
        
        this.token = null;
        this.user = null;
        
        localStorage.removeItem('token');
        localStorage.removeItem('user');
        
        window.location.href = 'login.html';
    }

    checkAuth() {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        
        if (!this.token || !this.user) {
            console.log('‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ login');
            window.location.href = 'login.html';
            return false;
        }
        
        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫:', this.user.username);
        return true;
    }

    getAuthHeaders() {
        return {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${this.token}`
        };
    }

    showMessage(message, type) {
        const messageEl = document.getElementById('authMessage');
        if (messageEl) {
            messageEl.textContent = message;
            messageEl.className = `message ${type}`;
            messageEl.style.display = 'block';
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                messageEl.style.display = 'none';
            }, 5000);
        }
    }

    showLoading(loading) {
        const forms = document.querySelectorAll('.auth-form');
        const buttons = document.querySelectorAll('.auth-btn');
        
        forms.forEach(form => {
            if (loading) {
                form.classList.add('loading');
            } else {
                form.classList.remove('loading');
            }
        });
        
        buttons.forEach(button => {
            button.disabled = loading;
            if (loading) {
                button.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
            } else {
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
                if (button.closest('#loginForm')) {
                    button.textContent = '–í–æ–π—Ç–∏';
                } else if (button.closest('#registerForm')) {
                    button.textContent = '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è';
                }
            }
        });
    }

    isValidEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    async validateToken() {
        if (!this.token) return false;

        try {
            const response = await fetch(`${API_BASE_URL}/auth/me`, {
                headers: this.getAuthHeaders()
            });

            if (response.ok) {
                const data = await response.json();
                this.user = data.user;
                localStorage.setItem('user', JSON.stringify(data.user));
                return true;
            } else {
                // –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
                this.logout();
                return false;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
            return false;
        }
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–∞–±–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞
function showLogin() {
    const loginForm = document.getElementById('loginForm');
    const registerForm = document.getElementById('registerForm');
    const tabBtns = document.querySelectorAll('.tab-btn');
    
    if (loginForm) loginForm.classList.remove('hidden');
    if (registerForm) registerForm.classList.add('hidden');
    
    if (tabBtns.length >= 2) {
        tabBtns[0].classList.add('active');
        tabBtns[1].classList.remove('active');
    }
    
    // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    const messageEl = document.getElementById('authMessage');
    if (messageEl) {
        messageEl.style.display = 'none';
    }
}

function showRegister() {
    const loginForm = document.getElementById('loginForm');
    const registerForm = document.getElementById('registerForm');
    const tabBtns = document.querySelectorAll('.tab-btn');
    
    if (loginForm) loginForm.classList.add('hidden');
    if (registerForm) registerForm.classList.remove('hidden');
    
    if (tabBtns.length >= 2) {
        tabBtns[0].classList.remove('active');
        tabBtns[1].classList.add('active');
    }
    
    // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    const messageEl = document.getElementById('authMessage');
    if (messageEl) {
        messageEl.style.display = 'none';
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
console.log('üîê –ó–∞–≥—Ä—É–∑–∫–∞ AuthManager');

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
let authManager;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', () => {
    console.log('üìÑ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, —Å–æ–∑–¥–∞–µ–º AuthManager');
    authManager = new AuthManager();
});

// –ï—Å–ª–∏ DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω
if (document.readyState === 'complete' || document.readyState === 'interactive') {
    console.log('üìÑ DOM —É–∂–µ –≥–æ—Ç–æ–≤, —Å–æ–∑–¥–∞–µ–º AuthManager');
    authManager = new AuthManager();
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = AuthManager;
}